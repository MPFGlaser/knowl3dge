stages:
  - install
  - build
  - test
  - code-quality
  - publish

variables:
  RULES_CHANGES_PATH: "**/*"
  SONAR_TOKEN: ""

# Only runs the stages on things that have changes, unless on master branch. Saves computing power and time.
.base-rules:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - $RULES_CHANGES_PATH
    - when: manual
      allow_failure: true

.backend:
  extends: .base-rules
  before_script:
    - cd ./backend
    - cp -fr $application_properties_dev config/application.properties
    - export GRADLE_USER_HOME=`pwd`/.gradle
  variables:
    RULES_CHANGES_PATH: "backend/**/*"

.backend-gradle:
  extends: .base-rules
  image: gradle:7.1.1-jdk11
  variables:
    GRADLE_OPTS: "-Dorg.gradle.daemon=false"
    RULES_CHANGES_PATH: "backend/**/*"
  before_script:
    - cd ./backend
    - SONAR_TOKEN=${SONAR_BACKEND_TOKEN}
    - cp -fr $application_properties_dev config/application.properties
    - export GRADLE_USER_HOME=`pwd`/.gradle

backend-build:
  stage: build
  extends: .backend-gradle
  needs: []
  script:
    - echo "Compiling the backend code..."
    - gradle build
  artifacts:
    paths:
      - backend/build/libs/*.jar
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: push
    paths:
      - build
      - .gradle

backend-test:
  stage: test
  extends: .backend-gradle
  script:
    - echo "Testing the backend code..."
    - gradle check
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - build
      - .gradle
  artifacts:
    when: always
    reports:
      junit: backend/build/test-results/test/TEST-*.xml

backend-code-quality:
  stage: code-quality
  extends: .backend-gradle
  needs: ['backend-test']
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
    GIT_DEPTH: "0" # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - echo "Running SonarQube on the backend code..."
    - gradle sonarqube
  allow_failure: true

backend-publish:
  stage: publish
  extends: .backend
  needs: ["backend-build"]
  image: docker:latest
  script:
    - echo "Publishing the backend code..."
    - docker build --build-arg JAR_FILE=build/libs/*.jar -t mpfglaser/knowl3dge-backend:$CI_COMMIT_SHORT_SHA -t mpfglaser/knowl3dge-backend:latest .
    - docker login -u mpfglaser -p ${DOCKER_HUB_KEY}
    - docker push mpfglaser/knowl3dge-backend:$CI_COMMIT_SHORT_SHA
    - docker push mpfglaser/knowl3dge-backend:latest
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: push
    paths:
      - build
      - .gradle

# Sets the directory for the frontend
.frontend:
  extends: .base-rules
  variables:
    RULES_CHANGES_PATH: "frontend/knowl3dge-webapp/**/*"
  before_script:
    - SONAR_TOKEN=${SONAR_FRONTEND_TOKEN}
    - cd ./frontend/knowl3dge-webapp
  cache:
    key:
      files:
        - frontend/knowl3dge-webapp/package-lock.json
    paths:
      - frontend/knowl3dge-webapp/node_modules

.frontend-node:
  extends: .base-rules
  image: node:14.18.1
  before_script:
    - cd ./frontend/knowl3dge-webapp
    - SONAR_TOKEN=${SONAR_FRONTEND_TOKEN}
    - apt-get update
    - npm install --legacy-peer-deps

frontend-install-dependencies:
  stage: install
  image: node:14.18.1
  script:
    - echo "Installing frontend dependencies..."
    - yarn install
    - yarn ngcc --properties es2015 --create-ivy-entry-points
  cache:
    key:
      files:
        - frontend/knowl3dge-webapp/yarn.lock
    paths:
      - frontend/knowl3dge-webapp/node_modules
  only:
    refs:
      - merge_requests
      - master
    changes:
      - frontend/knowl3dge-webapp/yarn.lock

frontend-build:
  stage: build
  extends: .frontend-node
  script:
    - echo "Compiling the frontend code..."
    - yarn ng build
  artifacts:
    name: "angular-app-pipeline"
    paths:
      - frontend/knowl3dge-webapp/dist
  cache:
    key:
      files:
        - frontend/knowl3dge-webapp/yarn.lock
    paths:
      - frontend/knowl3dge-webapp/node_modules
    policy: pull

frontend-test:
  stage: test
  extends: .frontend-node
  script:
    - echo "Testing the frontend code..."
    - wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
    - apt install -y ./google-chrome*.deb;
    - export CHROME_BIN=/usr/bin/google-chrome

    - npm run test -- --no-watch --no-progress --browsers=ChromeHeadlessCI
  cache:
    key:
      files:
        - frontend/knowl3dge-webapp/yarn.lock
    paths:
      - frontend/knowl3dge-webapp/node_modules
    policy: pull
  artifacts:
    paths:
      - frontend/knowl3dge-webapp/coverage
      - frontend/knowl3dge-webapp/reports
    reports:
      junit: frontend/knowl3dge-webapp/reports/junit_report.xml
    expire_in: 1 day

frontend-code-quality:
  stage: code-quality
  extends: .frontend-node
  needs: ["frontend-test"]
  dependencies:
    - frontend-test
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
    GIT_DEPTH: "0" # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key:
      files:
        - frontend/knowl3dge-webapp/yarn.lock
    paths:
      - frontend/knowl3dge-webapp/node_modules
    policy: pull
  script:
    - echo "Running SonarQube on the frontend code..."
    - npm run sonar-scanner -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.login=${SONAR_FRONTEND_TOKEN}
  allow_failure: true

frontend-publish:
  stage: publish
  extends: .frontend
  image: docker:latest
  script:
    - echo "Publishing the frontend code..."
    - docker build -t mpfglaser/knowl3dge-webapp:$CI_COMMIT_SHORT_SHA -t mpfglaser/knowl3dge-webapp:latest .
    - docker login -u mpfglaser -p ${DOCKER_HUB_KEY}
    - docker push mpfglaser/knowl3dge-webapp:$CI_COMMIT_SHORT_SHA
    - docker push mpfglaser/knowl3dge-webapp:latest
